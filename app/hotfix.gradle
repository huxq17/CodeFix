task makeJar(type: Jar) {
    appendix = "demo"
    baseName = "androidJar"
    version = "1.0.1"
    classifier = "debug"
    //后缀名
    extension = "jar"
    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
    archiveName = "patch.jar"
    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/debug"];
    //初始化资源路径集
    from srcClassDir
    //根据需要include,只要生成有错误的那个或多个class文件就行，加上这个主要是可以减小补丁包的体积，如果省事可以注释并无视。
//    include "com/huxq17/plugins/example/Util.class","第二个有问题的类.class"
}
task buildDex(type: Exec) {
    String buildDirPath = project.buildDir.absolutePath
    workingDir getSdkDir() + '/platform-tools'
    commandLine 'cmd', '/c', 'dx  --dex --output ' + buildDirPath + '/libs/export_patch.jar ' + buildDirPath + '/libs/patch.jar'
    doLast {
        delete buildDirPath + "/libs/patch.jar"
    }
}

task buildDexWithVersion(type: Exec) {
    String buildDirPath = project.buildDir.absolutePath
    workingDir getSdkDir() + '/platform-tools'
    commandLine 'cmd', '/c', 'dx  --dex --output ' + buildDirPath + '/libs/export_patch_' + VERSION_NAME + '.jar ' + buildDirPath + '/libs/patch.jar'
    doLast {
        delete buildDirPath + "/libs/patch.jar"
    }
}

String getSdkDir() {
    Properties properties = new Properties()
    File propertyFile = new File(rootDir.getAbsolutePath() + "/local.properties")
    properties.load(propertyFile.newDataInputStream())
    return properties.getProperty('sdk.dir');
}
task buildDexwhileCompile(type: Exec) {
//    String buildDirPath = project.buildDir.absolutePath
    workingDir rootDir.getAbsolutePath()
    println("rootDir.getAbsolutePath()="+rootDir.getAbsolutePath())
    commandLine 'cmd', '/c','.\\gradlew buildDex'
}
tasks.findByName('build').doLast {
//    buildDexwhileCompile.execute()
}
makeJar.dependsOn(build)
buildDex.dependsOn(makeJar)
buildDexWithVersion.dependsOn(makeJar)
//makeJar.mustRunAfter build
//buildDex.mustRunAfter makeJar
