apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
}

////dependsOn 可根据实际需要增加或更改
//task makeJar(type: Jar) {
//    appendix = "demo"
//    baseName = "androidJar"
//    version = "1.0.1"
//    classifier = "debug"
//    //后缀名
//    extension = "jar"
//    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
////    archiveName = "AndroidJarDemo.jar"
//    //需打包的资源所在的路径集
//    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
//    //初始化资源路径集
//    from srcClassDir
//    //只导入资源路径集下的部分资源
//    include "com/huxq17/example/library/*.class"
//    //注: exclude include 支持可变长参数
//}
//makeJar.dependsOn(build)
//task proguardJar(dependsOn: ['makeJar'], type: ProGuardTask) {
//    //Android 默认的 proguard 文件
//    configuration android.getDefaultProguardFile('proguard-android.txt')
//    //manifest 注册的组件对应的 proguard 文件
//    configuration project.buildDir.absolutePath + "/intermediates/proguard-rules/release/aapt_rules.txt"
//    configuration 'proguard-rules.pro'
//    String inJar = makeJar.archivePath.getAbsolutePath()
//    //输入 jar
//    injars inJar
//    //输出 jar
//    outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + "/proguard-${makeJar.archiveName}"
//    //设置不删除未引用的资源(类，方法等)
//    dontshrink
//    Plugin plugin = getPlugins().hasPlugin(AppPlugin) ?
//            getPlugins().findPlugin(AppPlugin) :
//            getPlugins().findPlugin(LibraryPlugin)
//    if (plugin != null) {
//        List<String> runtimeJarList
//        if (plugin.getMetaClass().getMetaMethod("getRuntimeJarList")) {
//            runtimeJarList = plugin.getRuntimeJarList()
//        } else if (android.getMetaClass().getMetaMethod("getBootClasspath")) {
//            runtimeJarList = android.getBootClasspath()
//        } else {
//            runtimeJarList = plugin.getBootClasspath()
//        }
//        for (String runtimeJar : runtimeJarList) {
//            //给 proguard 添加 runtime
//            libraryjars(runtimeJar)
//        }
//    }
//}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
}
